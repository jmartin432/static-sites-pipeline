AWSTemplateFormatVersion: '2010-09-09'
Description: The AWS CloudFormation template for Static Sites deployment pipelines

Parameters:
  Region:
    Type: String
    Default: us-east-1
  TimeStamp:
    Type: String
  AccountId:
    Type: String
    Default: '{{resolve:ssm:account-id:1}}'
  BranchName:
    Description: github branch name
    Type: String
    Default: master
  RepositoryName:
    Description: github repository name
    Type: String
    Default: portfolio
  GitHubOwner:
    Type: String
    Default: jmartin432
  Email:
    Type: String
    Default: info@justinlmartin.com
  ArtifactBucketName:
    Type: String
    Default: '{{resolve:ssm:static-sites-pipeline-artifacts-bucket:1}}'
  DeploymentBucketName:
    Type: String
    Default: '{{resolve:ssm:static-sites-pipeline-deployment-bucket:1}}'
  LambdasBucketName:
    Type: String
    Default: '{{resolve:ssm:static-sites-pipeline-lambdas-bucket:1}}'
  SlackWebHookPath:
    Type: String
    Default: '{{resolve:secretsmanager:slack-webhook-paths:SecretString:static-sites-pipeline}}'

Resources:

# Buckets

  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ArtifactBucketName
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DeploymentBucketName
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  LambdasBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref LambdasBucketName
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

# Log Groups

  PipelineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: static-sites-pipeline-log-group
      RetentionInDays: 14

  PortfolioBuildLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref PipelineLogGroup
      LogStreamName: static-sites-portfolio-codebuild-log-stream

# SNS

  DeployStatusTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Deploy Lambda Status Topic
      TopicName: static-sites-deploy-lambda-sns-topic

  SlackRouterDeployStatusSubsciription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt SlackRouterLambda.Arn
      Protocol: lambda
      Region: !Ref Region
      TopicArn: !Ref DeployStatusTopic
    DependsOn:
      - SlackRouterLambda

# Rules

  CodeBuildSuccessRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Static Sites Events Rule for CodeBuild Success
      EventPattern:
        source:
          - aws.codebuild
        detail-type:
          - CodeBuild Build State Change
        detail:
          build-status:
            - SUCCEEDED
      Name: static-sites-pipleline-codebuild-success-rule
      RoleArn: !GetAtt EventsRuleRole.Arn
      State: ENABLED
      Targets:
        - Arn: !GetAtt DeployLambda.Arn
          Id: deploy_lambda
    DependsOn:
      - DeployLambda

  CodeBuildStateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Static Sites Events Rule for CodeBuild State Change
      EventPattern:
        source:
          - aws.codebuild
        detail-type:
          - CodeBuild Build State Change
      Name: static-sites-pipleline-codebuild-state-change-rule
      RoleArn: !GetAtt EventsRuleRole.Arn
      State: ENABLED
      Targets:
        - Arn: !GetAtt SlackRouterLambda.Arn
          Id: slack_router_lambda
    DependsOn:
      - SlackRouterLambda

# CodeBuild

  PortfolioCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: portfolio-codebuild
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      BadgeEnabled: false
      Description: Portfolio CodeBuild
      Source:
        Auth:
          Type: OAUTH
        BuildSpec: buildspec.yml
        GitCloneDepth: 0
        GitSubmodulesConfig:
          FetchSubmodules: false
        InsecureSsl: false
        Location: https://github.com/jmartin432/portfolio.git
        ReportBuildStatus: false
        SourceIdentifier: portfolio_source
        Type: GITHUB
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        PrivilegedMode: true
      QueuedTimeoutInMinutes: 5
      Artifacts:
        ArtifactIdentifier: portfolio_artifacts
        EncryptionDisabled: false
        Location: !Ref ArtifactBucketName
        Name: portfolio.zip
        NamespaceType: NONE
        Path: portfolio-artifacts
        Packaging: ZIP
        Type: S3
      Triggers:
        Webhook: true
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref PipelineLogGroup
          StreamName: !Ref PortfolioBuildLogStream
          Status: ENABLED
      TimeoutInMinutes: 5

# Lambdas

  DeployLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub ${TimeStamp}/lambdas.zip
      FunctionName: !Sub static-sites-pipeline-deploy-lambda-${TimeStamp}
      Environment:
        Variables:
          ArtifactBucket: !Ref ArtifactBucketName
          DeployBucket: !Ref DeploymentBucketName
          StatusTopicArn: !Ref DeployStatusTopic
      Handler: deploy-lambda.handler
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 60
      Description: Deploys Artifacts to S3 Deploy Bucket
    DependsOn:
      - LambdaRole
      - DeployStatusTopic

  DeployLambdaCodeBuildEventTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref DeployLambda
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt CodeBuildSuccessRule.Arn
    DependsOn:
      - DeployLambda

  SlackRouterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub ${TimeStamp}/lambdas.zip
      FunctionName: !Sub static-sites-pipeline-slack-router-lambda-${TimeStamp}
      Environment:
        Variables:
          SlackWebHookPath: !Ref SlackWebHookPath
      Handler: slack-router-lambda.handler
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 30
      Description: Sends Pipeline Slack Notifications
    DependsOn:
      - LambdaRole

  SlackRouterLambdaCodeBuildEventTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SlackRouterLambda
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt CodeBuildStateChangeRule.Arn
    DependsOn:
      - SlackRouterLambda

  SlackRouterLambdaSNSTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SlackRouterLambda
      Principal: 'sns.amazonaws.com'
      SourceArn: !Ref DeployStatusTopic
    DependsOn:
      - SlackRouterLambda


# Roles

  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: static-sites-pipeline-codebuild-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: static-sites-pipeline-codebuild-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLogging
                Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Sid: AllowS3Access
                Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Sub arn:aws:s3:::${DeploymentBucketName}/*
                  - !Sub arn:aws:s3:::${ArtifactBucketName}/*
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: static-sites-pipeline-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: static-sites-pipeline-lambda-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowLogging
                Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - '*'
              - Sid: AllowS3Access
                Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${DeploymentBucketName}/*
                  - !Sub arn:aws:s3:::${ArtifactBucketName}/*
              - Sid: AllowSNSPublish
                Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                  - '*'
      Path: "/"

  EventsRuleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: static-sites-pipeline-events-rule-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: static-sites-pipeline-events-rule-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowLambdaInvoke
                Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource:
                  - '*'
      Path: "/"

  SNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: static-sites-pipeline-sns-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: static-sites-pipeline-sns-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowLambdaInvoke
                Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource:
                  - '*'
      Path: "/"


Outputs:
  LatestTimeStamp:
    Value: !Ref TimeStamp